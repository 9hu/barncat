#!/bin/bash

#  _._     _,-'""`-._
# (,-.`._,'(       |\`-/|  barncat
#     `-.-' \ )-`( , o o)
# -bf-      `-    \`_`"'-

# config -----------------------------------------------------------
ext_markdown='.md'
ext_html='.html'

markdown_converter='kramdown'
html_cleanup='tidy -q --show-warnings no -w 0 --tidy-mark no'

dir_input='./input'
dir_output='./output'
dir_layouts='./layouts'
dir_fragments='./fragments'

verbose=true # default verbosity
#-------------------------------------------------------------------

working="\033[0;93mworking\033[0m"
created="\033[0;32mcreated\033[0m"
removed="\033[0;32mremoved\033[0m"
error="\033[0;31merror!!\033[0m"
arrow="\033[0;36m->\033[0m"

function defragment { # $1 = file to defragment
  for frag in $(sed -nr 's/.*\{\{ frag (.*) \}\}.*/\1/p' $1) ; do
    sed -e "/{{ frag $frag }}/ {" -e "r $dir_fragments/$frag" -e 'd' -e '}' -i $1
  done
}

function replace-variables { # $1 = file to replace variables
  var_sed="
  s|{{ title }}|placeholder|g ;
  s|{{ modified date }}|$(date -r $input +"%Y-%d-%m")|g ;
  s|{{ current date}}|$(date +%Y-%m-%d)|g
  "
  sed -i -e "$var_sed" $1
}

function get-layout { # $1 = file to get layout for
  path=$(echo ${1%/*} | sed "s|$dir_input|$dir_layouts|g ; s|/|-|g")
  if [[ -f $path$ext_html ]] ; then
    layout=$path
  else
    layout=$dir_layouts/default.html
  fi
  if [[ ! -f $layout ]] ; then
    printf "\r$error\nmissing layout file $layout\n"
    printf "exiting without building...\n" ; exit
  fi
}

function generate-markdown {
  mark=$(mktemp) ; html=$(mktemp) ; conver=$(mktemp)
  trap "rm -rf $mark $html $conver" EXIT

  get-layout $input
  cat $layout > $html
  defragment $html
  replace-variables $html

  cat $input > $mark
  defragment $mark

  eval $markdown_converter $mark > $conver
  sed -e '/{{ content }}/ {' -e "r $conver" -e 'd' -e '}' -i $html
  eval $html_cleanup $html > $output
  rm -rf $mark $html $convar
}

function generate-file {
  if $verbose ; then 
    printf "$working ${input#"$dir_input/"} $arrow ${output#"$dir_output/"} "
  fi

  if [[ ! -d ${output%/*} ]] ; then
    mkdir -p ${output%/*}
  fi

  if [[ $markdown ]] ; then
    generate-markdown
  else
    cp $input $output
  fi

  if $verbose ; then
    printf "\r$created\n"
  fi
}

function remove-files {
  for output in $(find "$dir_output" -type f) ; do
    input1=$(echo $output | sed "s|$dir_output|$dir_input|g")
    input2=$(echo $input1 | sed "s|$ext_html|$ext_markdown|g")
    if [ ! -e $input1 ] && [ ! -e $input2 ] ; then
      printf "$working $output"
      rm -rf $output
      printf "\r$removed\n"
    fi
  done
  find $dir_output -type d -empty -delete
}

function build-website {
  remove-files
  find $dir_layouts -type d -empty -delete ; mkdir -p $dir_layouts
  for input in $(find "$dir_input" -type f) ; do
    output=$(echo $input | sed "s|$dir_input|$dir_output|g")
    if [[ $input == *$ext_markdown ]] ; then
      markdown=true
      output=$(echo $output | sed "s|$ext_markdown|$ext_html|g")
    else
      markdown=false
    fi
    if [[ $input -nt $output ]] ; then
      generate-file
    fi
  done
}

function print-usage {
  printf "barncat [-h|--help]    (print this output)\n"
  printf "        [-f|--full]    (full rebuild of the site)\n"
  printf "        [-v|--verbose] (print every file created and removed)\n"
  printf "        [-q|--quiet]   (print nothing (but errors!))\n"
}

while test $# -gt 0; do
  case "$1" in
    -q|--quiet)
      verbose=false ; shift ;;
    -v|--verbose)
      verbose=true ; shift ;;
    -f|--full)
      rm -rf $dir_output/* ; shift ;;
    -h|--help)
      print-usage ; exit ;;
    *)
      printf "$error $1 is not a valid command!\n\n" ; print-usage ; exit ;;
  esac
done

build-website
