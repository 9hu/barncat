#!/bin/bash

#  _._     _,-'""`-._
# (,-.`._,'(       |\`-/|  barncat
#     `-.-' \ )-`( , o o)
# -bf-      `-    \`_`"'-

done="\033[0;32mdone\033[0m"
good="\033[0;32mgood\033[0m"
error="\033[0;31merror\033[0m"

function print-commands {
  printf "barncat commands: ./barncat <command>\n"
  printf " build        incremental build\n"
  printf " full         full build, as opposed to an incremental build\n"
  printf " error-check  makes sure things are where they should be\n"
  exit 0
}

function generate-vars {
  sed_title="s|{{ title }}|sample title template thing|g"
  sed_creation="$(echo "s|{{ creation date }}|$(stat -c %y $input_file | sed 's/\s.*$//')|g")"
  sed_modified="$(echo "s|{{ modified date }}|$(stat -c %y $input_file | sed 's/\s.*$//')|g")"
  sed_string="$sed_title ; $sed_creation ; $sed_modified"
}

function generate-page {
  html="$dir_temp$rel_url"
  temp=$(mktemp) ; trap "rm -rf $temp" EXIT
  cat "$dir_layouts/${layouts[i+1]}" > $html
  sed -i "$sed_string" $html
  eval $markdown_converter $input_file > $temp
  sed -e '/{{ content }}/ {' -e "r $temp" -e 'd' -e '}' -i $html
  eval $html_cleanup $html
}

function build-markdowns {
  for (( i=0 ; i<${#layouts[@]} ; i=$((i+2)) )) ; do
    for input_file in $(find "$dir_temp${layouts[i]}" -type f) ; do
      if [[ $input_file == *$ext_markdown ]] ; then
        rel_url="$(echo $input_file | sed "s|$dir_temp||g;s|$ext_markdown|$ext_html|g")"
        if [[ $input_file -nt $dir_output$rel_url ]] ; then
          generate-vars
          generate-page
        fi
        rm -f $input_file
      fi
    done
  done
}

function build-site {
  for input_file in $(find "$dir_temp" -type f) ; do
    output_file=$(echo $input_file | sed "s|$dir_temp|$dir_output|g")
    if [[ $input_file -nt $output_file ]] ; then
      cp $input_file $output_file
    fi
  done
}

function clone-input {
  tempd=$(mktemp -d)
  trap "rm -rf $dir_temp" EXIT
  cp -a "$dir_input/." $dir_temp
}

function copy-dir-structure {
  dir_barncat=$(pwd)
  cd $dir_input
  paths=$(find . -type d)
  cd $dir_barncat ; cd $dir_output
  for path in $paths ; do
    mkdir -p $path
  done
  cd $dir_barncat
}


function purge-site { # purge the site
  printf "purging output..."
  rm -f -r $dir_output/*
  printf "\r$done purging output\n"
}

function error-check {
  printf "checking confif.sh... "
  if [ -f ./config.sh ] ; then
    source ./config.sh
  else
    printf "\n$error ./config.sh is missing!\nexiting...\n" ; exit
  fi

  for dir in $dir_input $dir_output $dir_layouts $dir_scripts ; do
    if [ ! -d $dir ] ; then
      printf "\n$error $dir directory does not exist, please create it"
    fi
  done
}

function main {
  clone-input #         $dir_input/files.all -> $dir_temp/files.all
  copy-dir-structure #     $dir_input/paths/ -> $dir_output/paths/
  execute-scripts #              eval $dir_scripts/script.sh
  build-markdowns #        $dir_temp/file.md -> $dir_temp/file.html
  build-site #            $dir_temp/file.all -> $dir_output/file.all
  rm -rf $dir_temp
}

case "$1" in
  build) source ./config.sh ; main ;;
  full) source ./config.sh ; purge-site ; main ;;
  error-check) error-check ;;
  *) print-commands ;;

esac
