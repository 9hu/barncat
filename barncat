#!/bin/bash

#  _._     _,-'""`-._
# (,-.`._,'(       |\`-/|  barncat
#     `-.-' \ )-`( , o o)
# -bf-      `-    \`_`"'-

done="\033[0;32mdone\033[0m"
error="\033[0;31merror\033[0m"

printf "reading config.sh... "
if [ -f ./config.sh ]; then
  source ./config.sh
else
  printf "\n$error: no ./config.sh file!\n" ; exit
fi
printf "\r$done reading config.sh\n"

function print-commands {
  printf "./barncat <command>\n"
  printf "  build       alias for full-build\n"
  printf "  full-build  delete current output, build entire website\n"
  printf "  delta-build build only new/modified parts, remove nothing\n"
}

function generate-vars {
  url="$(echo $html | sed "s|$output||g")"
  sed_title="s|{{ title }}|sample title template thing|g"
  sed_creation="$(echo "s|{{ creation date }}|$(stat -c %y $file | sed 's/\s.*$//')|g")"
  sed_modified="$(echo "s|{{ modified date }}|$(stat -c %y $file | sed 's/\s.*$//')|g")"
  sed_string="$sed_title ; $sed_creation ; $sed_modified"
}

function generate-page {
  temp=$(mktemp) ; trap "rm -rf $temp" EXIT
  cat "$layouts/${layout[i+1]}" > $html
  sed -i "$sed_string" $html
  eval $markdown_converter $file > $temp
  sed -e '/{{ content }}/ {' -e "r $temp" -e 'd' -e '}' -i $html
  eval $html_cleanup $html
}

function build-file {
  if [[ $file == *$markdown_ext ]] ; then
    html="$(echo $file | sed "s|$tempd|$output|g;s|$markdown_ext|$html_ext|g")"
    if [[ $file -nt $html ]] ; then
      generate-vars
      generate-page
    fi
  else
    output_file=$(echo $file | sed "s|$tempd|$output|g")
    if [[ $file -nt $output_file ]] ; then
      cp $file $output_file
    fi
  fi
}

function clone-input {
  tempd=$(mktemp -d)
  trap "rm -rf $tempd" EXIT
  cp -a "$input/." $tempd
}

function build-site {
  clone-input
  (cd $input && find . -type d -exec mkdir -p ../$output/{} \;)

  for (( i=0 ; i<${#layout[@]} ; i=$((i+2)) )) ; do
    echo $tempd
    echo ${layout[i]}
    for file in $(find -type f -path "$tempd${layout[i]}") ; do
      echo ppppp
      build-file
    done
  done
  rm -rf $tempd
  # printf "\r$done locating input files ($(wc -l < $inputs) files)\n"

# printf "copying non-markdown files to output... "
# counter[0]=0 ; counter[1]=0
# while read file ; do
#   if [[ $file != *$markdown_ext ]] ; then
#     output_file=$(echo $file | sed "s|$input|$output|g")
#     if [[ $file -nt $output_file ]] ; then
#       cp $file $output_file
#       ((counter[0]++))
#     fi
#     ((counter[1]++))
#   fi
# done < $inputs
# sed -i -n "/$markdown_ext$/p" $inputs
# printf "\r$done copied non-markdown files "
# printf "(${counter[0]}/${counter[1]} files)\n"
#
# counter[0]=0 ; counter[1]=0
# printf "rendering markdown files to output... "
# for (( i=0 ; i<${#layout[@]} ; i=$((i+2)) )) ; do
#   while read file ; do
#     if [[ $file == $input${layout[$i]}* ]] ; then
#       generate-vars $file
#       if [ "$file" -nt "$html" ] ; then
#         generate-page ${layout[$i+1]}
#         ((counter[0]++))
#       fi
#       ((counter[1]++))
#     fi
#   done < $inputs
#   sed -i "\|$input${layout[$i]}|d" $inputs
# done
# printf "\r$done rendered markdown files "
# printf "(${counter[0]}/${counter[1]} files)\n"
  printf "$done built website\n"
}

function purge-site { # purge the site
  printf "purging output..."
  rm -f -r $output/*
  printf "\r$done purging output\n"
}


case "$1" in
  delta-build) build-site ;;
  build) purge-site ; build-site ;;
	full-build) purge-site ; build-site ;;
  clone) clone-input ;;
	*) print-commands ;;

esac
