#!/bin/bash

source ./config.sh

done="\033[0;32mdone\033[0m"
error="\033[0;31merror\033[0m"

function print_commands {
  printf "./barncat <command>\n\n"
  printf "  build        alias for delta-build\n"
  printf "  delta-build  rebuild modified files (deleted files removed)\n"
  printf "  full-build   rebuild entire website\n"
  printf "  delta-cache  adds modified files to cache (deleted files removed)\n"
  printf "  full-cache   rebuilds entire cache\n"
}

function insert_file { # insert $2 -> $1 @ $3
  line=$(grep -n "$3" $2)
  sed -i "$line r $1" $2
}

function generate-vars {
  # echo "generate-vars $1"
  stripped="$(echo $1 | sed "s|$input||g ; s|$markdown_ext|$html_ext|g")"
  url="/$stripped"
  html="$output$stripped"
  sed_title="s|{{ title }}|sample title template thing|g"
  sed_creation="$(echo "s|{{ creation-date }}|$(stat -c %y $1 | sed 's/\s.*$//')|g")"
  sed_modified="$(echo "s|{{ modified-date }}|$(stat -c %y $1 | sed 's/\s.*$//')|g")"
  sed_string="$sed_title ; $sed_creation ; $sed_modified"
}

function generate-page { # $1 = layout file
  generate-vars $file
  if [ "$file" -nt "$output_file" ] ; then
    temp_file=$(mktemp)
    # cat "$layouts$2" > $temp_file
    markdown="$($markdown_converter $file)"
  fi
}

function build-site {
  # duplidate directory structure, if it doesn't already exist
  (cd $input && find . -type d -exec mkdir -p ../$output{} \;)
  for path in "${!layout[@]}" ; do 
    for file in $(find -type f -wholename "$input$path*$markdown_ext") ; do
      generate-page ${layout[$path]}
    done
  done
  for file in $(find -type f -wholename "$input*") ; do
    if [[ $file == *$markdown_ext ]] ; then
      generate-page $mdfile default.html
    else
      output_file="$(echo $file | sed "s|$input|$output|g")"
      if [ "$file" -nt "$output_file" ] ; then
        cp $file $output_file
      fi
    fi
  done
}

function clear-site { # purge the cache, purge the site
  rm -r $output* $cache*
}

function build-indices {
  for name in "${!index[@]}" ; do
    index_data="${index[$name]}"
    #for mdfile in $(find -type f -wholename "$input$index_data[0]*$markdown_ext") ; do
     # generate-vars $mdfile
    #done
  done
}

case "$1" in
	build) build-site ;;
	rebuild) echo "verbose hello" ;;
  cache) build_cache true ;;
  not-cache) build_cache false ;;
	*) print_commands ;;

esac
